{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Identifying-collinear-features-in-our-input-data\" data-toc-modified-id=\"Identifying-collinear-features-in-our-input-data-1\">Identifying collinear features in our input data</a></span></li><li><span><a href=\"#Data-set\" data-toc-modified-id=\"Data-set-2\">Data set</a></span></li><li><span><a href=\"#Correlation-matrix\" data-toc-modified-id=\"Correlation-matrix-3\">Correlation matrix</a></span></li><li><span><a href=\"#Rank-of-covariance-matrix\" data-toc-modified-id=\"Rank-of-covariance-matrix-4\">Rank of covariance matrix</a></span></li><li><span><a href=\"#Using-VIF-scores\" data-toc-modified-id=\"Using-VIF-scores-5\">Using VIF scores</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "86Tvnj5UblTy"
   },
   "source": [
    "# Identifying collinear features in our input data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qn_eOn2EblT3"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import seaborn as sns\n",
    "from numpy.linalg import matrix_rank, inv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VMoYWIayblUB"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>w</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.894309</td>\n",
       "      <td>0.002099</td>\n",
       "      <td>-0.943643</td>\n",
       "      <td>-0.883052</td>\n",
       "      <td>0.002099</td>\n",
       "      <td>-0.908683</td>\n",
       "      <td>0.256013</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.111201</td>\n",
       "      <td>1.261706</td>\n",
       "      <td>-0.943643</td>\n",
       "      <td>-0.164556</td>\n",
       "      <td>1.261706</td>\n",
       "      <td>-0.262030</td>\n",
       "      <td>-0.363632</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.050931</td>\n",
       "      <td>0.631903</td>\n",
       "      <td>-0.874309</td>\n",
       "      <td>-1.018380</td>\n",
       "      <td>0.631903</td>\n",
       "      <td>-1.022109</td>\n",
       "      <td>-1.673036</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.050931</td>\n",
       "      <td>-0.207835</td>\n",
       "      <td>-1.012978</td>\n",
       "      <td>-1.018380</td>\n",
       "      <td>-0.207835</td>\n",
       "      <td>-1.038851</td>\n",
       "      <td>-1.664802</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.834038</td>\n",
       "      <td>-0.207835</td>\n",
       "      <td>-1.220981</td>\n",
       "      <td>-1.653168</td>\n",
       "      <td>-0.207835</td>\n",
       "      <td>-1.635278</td>\n",
       "      <td>-1.371915</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x         y         z         a         b         c         w  class\n",
       "0 -0.894309  0.002099 -0.943643 -0.883052  0.002099 -0.908683  0.256013      0\n",
       "1 -0.111201  1.261706 -0.943643 -0.164556  1.261706 -0.262030 -0.363632      0\n",
       "2 -1.050931  0.631903 -0.874309 -1.018380  0.631903 -1.022109 -1.673036      0\n",
       "3 -1.050931 -0.207835 -1.012978 -1.018380 -0.207835 -1.038851 -1.664802      0\n",
       "4 -1.834038 -0.207835 -1.220981 -1.653168 -0.207835 -1.635278 -1.371915      0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('Data.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Correlation matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = data.corr()\n",
    "\n",
    "sns.heatmap(corr,  vmin=-1, vmax=1, center=0,\n",
    "        cmap=sns.cubehelix_palette(8),\n",
    "        xticklabels=corr.columns,\n",
    "        yticklabels=corr.columns,annot=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We could see variables few variables are **highly** correlated with each other. We have a confirmation on existence of multicollinearity by observing correlation matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JIIuomCkblUP"
   },
   "outputs": [],
   "source": [
    "X = data.drop(['class'], axis=1).values\n",
    "Y = data['class'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rank of covariance matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's see the rank of our covariance matrix, so that we can know how\n",
    "# many independent features are there in our input data X.\n",
    "\n",
    "covariance_matrix = np.dot(X.T, X)\n",
    "matrix_rank(covariance_matrix)\n",
    "\n",
    "# We can say there are 5 independent variables and 2 are redundant(dependent/correlated) variables.\n",
    "# This is the sign of existing multicollinearity(value< number of columns).\n",
    "# let's investigate to know which are redundant variables.  \n",
    "# For more information one should know the meaning of rank of a matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using VIF scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[276.1677317318594,\n",
       " 163767259177108.94,\n",
       " inf,\n",
       " inf,\n",
       " 225179981368524.8,\n",
       " inf,\n",
       " 1.8624829482324663]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can check the mulicollinearity by observing VIF score also\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "[variance_inflation_factor(X, i) for i in range(X.shape[1])]\n",
    "\n",
    "# VIF internally consider the R^2(R square) by fitting Linear regression considering second\n",
    "# argument as dependent variable. And remaining columns as explanatory variables.\n",
    "# VIF>5 indicates existence of high multicollinearily."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It indicates that, by considering all the columns, all variables except the variable 'w' are linearly related with others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.416085304006567, 1.8347498704430107, 1.5704585695729896]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The best regression models are those in which the predictor variables each correlate highly \n",
    "# with the dependent (outcome) variable but correlate at most only minimally with each other. \n",
    "# If we observe the correlation matrix, variable 'z' is highly correlated with our target variable. \n",
    "# So the explanatory variables which are highly correlated with this variable can be considered as redundant variables.\n",
    "\n",
    "X_new=data[['z','w','y']].values \n",
    "[variance_inflation_factor(X_new, i) for i in range(X_new.shape[1])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, We can conclude these(three) variables are linearly independent."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "8D_LR_SVM.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
